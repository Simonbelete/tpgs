"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import environ
from pathlib import Path
from datetime import timedelta
from corsheaders.defaults import default_headers

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

URL_PREFIX = env('URL_PREFIX')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&_==jje33tyczv#ugjreuy+tuk2pl%^iut)4-gzhin3h$86u=9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
#     "http://172.27.1.72:3000"
# ]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_HEADERS = [
    *default_headers,
    'x-Request-Id',
    'X-Superuser-Mode'
]

ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = []

# Email
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

EMAIL_ADDRESS = env('EMAIL_ADDRESS')
NO_REPLAY_EMAIL_ADDRESS = env('NO_REPLAY_EMAIL_ADDRESS')

DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"

# url
SITE_URL = env('SITE_URL')

# Application definition

SHARED_APPS = [
    'django_tenants',
    'adminactions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'djmoney',
    'notifications',
    'drf_spectacular',
    'import_export',
    'django_filters',
    'simple_history',
    'django_rest_passwordreset',
    'django_celery_beat',
    'django_celery_results',
    'auths',
    'farms',
    'users',
    'cities_light',
    'core',
    'currency',
    'invitations',
    'contact',
    'nutrients',
    'ingredients',
    'units',
    'purposes',
    'formulas',
    'inbox',
    'requirements',
    'city',
    'drf_standardized_errors'
]

TENANT_APPS = [
    'flocks',
    'actstream',
    'recipes',
    'rations',
    'breeds',
    'stages',
    'chickens',
    'eggs',
    'feeds',
    'weights',
    'houses',
    'pen',
    'accusation',
    'reduction_reason',
    'hatchery'
]

INSTALLED_APPS = list(SHARED_APPS) + \
    [app for app in TENANT_APPS if app not in SHARED_APPS] + \
    ['analyses']

# SHOW_PUBLIC_IF_NO_TENANT_FOUND = True

SITE_ID = 1

AUTH_USER_MODEL = 'users.User'

# Celery
# save Celery task results in Django's database
CELERY_RESULT_BACKEND = env('CELERY_BROKER_URL')

# This configures Redis as the datastore between Django + Celery
CELERY_BROKER_URL = env('CELERY_RESULT_BACKEND')

# this allows you to schedule items in the Django admin.
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'

# For cache backend
CELERY_CACHE_BACKEND = 'django-cache'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.FarmMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',
        "NAME": env('POSTGRESQL_DB'),
        "USER": env('POSTGRESQL_USER'),
        "PASSWORD": env('POSTGRESQL_PASSWORD'),
        "HOST": env('POSTGRESQL_HOST'),
        "PORT": env('POSTGRESQL_PORT'),
        "TEST": {
            "MIRROR": "default",
        },
    },
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     "NAME": env('POSTGRESQL_DB'),
    #     "USER": env('POSTGRESQL_USER'),
    #     "PASSWORD": env('POSTGRESQL_PASSWORD'),
    #     "HOST": env('POSTGRESQL_HOST'),
    #     "PORT": env('POSTGRESQL_PORT'),
    # },
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

TENANT_MODEL = "farms.Farm"
TENANT_DOMAIN_MODEL = "farms.Domain"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DRF_STANDARDIZED_ERRORS = {"ENABLE_IN_DEBUG_FOR_UNHANDLED_EXCEPTIONS": DEBUG}


REST_FRAMEWORK = {
    # "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler",
    'DATETIME_FORMAT': DATETIME_FORMAT,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
        # 'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_SCHEMA_CLASS': 'core.schemas.TenantHeaderSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ]
}

SIMPLE_JWT = {
    "TOKEN_OBTAIN_SERIALIZER": "core.serializers.MyTokenObtainPairSerializer",
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'TPGS API',
    'DESCRIPTION': 'TPGS Platforms API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True
}
